# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types state_panel_types {
	### WORKFORCE
	type state_panel_buildings_fixed_bottom = flowcontainer {
		direction = vertical
		margin = { 10 5 }
		minimumsize = { @panel_width -1 }
		spacing = 4

		background = {
			using = entry_bg_simple
		}

		container = {
			tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
			minimumsize = { 520 -1 }
			
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					spacing = 7
					tooltip = "[State.GetJobseekersDesc]"
				
					textbox = {
						text = "JOBSEEKERS"
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}

					textbox = {
						raw_text = "#variable [State.GetNumJobseekers|D]#!"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right|vcenter
					margin_right = 10

					textbox = {
						raw_text = "[concept_pop_qualifications]: "
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}
					
					textbox = {
						visible = "[Not(State.HasInsufficientQualificationsForAvailablePositions)]"
						raw_text = "@green_checkmark!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
					
					textbox = {
						visible = "[State.HasInsufficientQualificationsForAvailablePositions]"
						raw_text = "@red_cross!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = right|vcenter

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[GetPopType('peasants').GetName]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumSubsistenceWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[concept_unemployed]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumUnemployedWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}
			}
		}

		divider_clean = {
			maximumsize = { 520 -1 }
		}

		# Hidden
		flowcontainer = {
			datamodel = "[StatesPanel.AccessLocalGoods]"
			maximumsize = { 0 0 }
			alpha = 0

			item = {
				widget = {
					size = { 0 0 }
					state = {
						trigger_when = "[Goods.IsLocal]"
						on_finish = "[GetScriptedGui('com_add_local_good').Execute(GuiScope
										.SetRoot(StatesPanel.AccessState.MakeScope)
										.AddScope('local_good', Goods.MakeScope)
										.End
									)]"
					}
				}
			}
		}

		dynamicgridbox = {
			datamodel = "[StatesPanel.AccessState.MakeScope.GetList('com_local_goods')]"
			maximumsize = { 520 -1 }
			minimumsize = { 520 25 }
			datamodel_wrap = 3
			flipdirection = yes

			item = {
				widget = {
					datacontext = "[Scope.GetGoods.WithStateContext(StatesPanel.AccessState.Self)]"
					size = { 170 25 }
					textbox = {
						size = { 170 25 }
						raw_text = "STATE_BUILDING_TAB_LOCAL_GOODS_INFO"
						align = center|nobaseline

						tooltipwidget = {
							FancyTooltip_Goods = {}
						}
					}
				}
			}
		}
	}
}
